<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>CNN model imports</title>
    </head>
    <body>

        <script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>

        <input
            type="file"
            id="avatar"
            name="avatar"
            accept="image/png, image/jpeg"
        />
        <img id="img" style="width:600px; height:auto; max-width: 1200px;" />

        <script is:inline>
            const img = document.getElementById("img");
            const avatar = document.getElementById("avatar");

            let myModel;

            window.onload = async () => {
                await tf.ENV.set("WEBGL_PACK_DEPTHWISECONV", "false");
                loadModel();
            };

            async function loadModel() {
                console.log("Loading Models");

                const start = new Date();
                // #tensorflowjs_converter --input_format=keras --output_format=tfjs_graph_model <input_path> <output_path>
                myModel = await tf.loadGraphModel(
                    "https://cdn.jsdelivr.net/gh/r48n34/self-tf-Model-storage/5Classv3Graph/model.json"
                );

                console.log(
                    "Time used to init: ",
                    (new Date() - start) / 1000,
                    " Done"
                );

                // const resource = await tf.util.fetch(
                //     "https://firebasestorage.googleapis.com/v0/b/fypserver-160d2.appspot.com/o/istockphoto-1053854126-170667a.jpg?alt=media&token=e089b111-fc91-45b9-8252-52e7aae03597"
                // );

                // console.log(resource);
            }

            //https://firebasestorage.googleapis.com/v0/b/fypserver-160d2.appspot.com/o/istockphoto-1053854126-170667a.jpg?alt=media&token=e089b111-fc91-45b9-8252-52e7aae03597

            let res;

            async function useModel() {
                let start = new Date();

                // Read img and reshape it
                // https://stackoverflow.com/questions/54774073/incorrect-predictions-when-using-the-keras-pre-trained-inceptionv3-xception-mode
                // normalizing the images into the range [-1, 1] before inputting them !!
                let imgPre = await tf.browser
                    .fromPixels(img)
                    .resizeNearestNeighbor([224, 224])
                    .toFloat()
                    .sub(tf.scalar(0)) // may set to 0 or just remove it
                    .div(tf.scalar(1)) // may set to 1 or just remove it
                    .expandDims();

                let afterResize = new Date();
                console.log(
                    "Img resize & rescale time",
                    (new Date() - start) / 1000
                );
                console.log(imgPre);

                // predict the inupt and output softmax prob
                const p = await myModel.predict(imgPre).data();

                // Get result and print regarding label
                const labelMyModel = ["bird", "cat", "dog", "fish", "lion"];
                let ind = p.indexOf(Math.max(...p));
                console.log(p);

                console.log("MyModel:", labelMyModel[ind]);

                console.log(
                    "Time used to predict: ",
                    (new Date() - afterResize) / 1000
                );
                console.log("Overall time: ", (new Date() - start) / 1000);
                console.log("----------------------------");
            }

            avatar.addEventListener("input", async (e) => {
                let f = e.currentTarget;
                const files = f.files[0]; // get files

                if (files) {
                    const fileReader = new FileReader();
                    fileReader.readAsDataURL(files);

                    fileReader.addEventListener("load", async function () {
                        img.src = this.result;
                        await timer(200);
                        useModel();
                    });
                }
            });

            function timer(t) {
                return new Promise((rec) => {
                    setTimeout(rec, t);
                });
            }

        </script>
    </body>
</html>
