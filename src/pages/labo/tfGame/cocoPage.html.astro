<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="initial-scale=1,maximum-scale=1.0, user-scalable=no">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  
  <script is:inline src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script is:inline src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

  <script is:inlinesrc="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl"></script>

  <script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/stats-js@1.0.1/build/stats.min.js"></script>

</head>
<body>
  <h2 style="text-align: center;">COCO object detection</h2>

  <div class="d-flex justify-content-center">
    <canvas id="output" style="height: auto; width: 80vw;"></canvas>
  </div>

  <div class="mt-2" style="text-align: center;">
    <button type="button" class="btn btn-dark" id="capBtn">Capture</button>
  </div>




  <video id="video" autoplay style="
  -webkit-transform: scaleX(-1); transform: scaleX(-1);
  visibility: hidden; width:auto; height:auto;">
  </video>
  
      
</body>

   

    <script is:inline>
        let model;

        // webCam
        const video = document.querySelector('video');

        // webCam display
        const canvas = document.getElementById('output');
        const ctx = canvas.getContext('2d');

        // debugMessage
        const debugMessage = document.getElementById("debugMessage")
        console.log("Width:", window.innerWidth)
        console.log("Height:", window.innerHeight)


        // video setup
        //const cameraMessage = document.getElementById("cameraMessage");
        //const videoSource = document.getElementById("videoSource");

        var stats = new Stats();
        stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom
        document.body.appendChild( stats.dom );

        async function getMedia() {
            let stream = null;

            var constraints = window.constraints = {
                audio: false,
                video: {
                    facingMode: "environment" 
                }
            };

            //let res = await navigator.mediaDevices.enumerateDevices();
        
            try {
            stream = await navigator.mediaDevices.getUserMedia(constraints);
            console.log(stream)

            window.stream = stream
            video.srcObject = stream

            } catch(err) {
                console.log(err);
            }
        }

        getMedia();

        // creata load model and active cameras
        async function loadModel(){
            //SINGLEPOSE_LIGHTNING = faster , SINGLEPOSE_THUNDER = acc up

            Swal.fire({
                title: 'Model loading...',
                html: 'Waiting for model load in, please wait.',
                timerProgressBar: true,
                allowEscapeKey: false,
                showCloseButton: false,
                showCancelButton: false,
                showConfirmButton: false,
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading()
                }
            });
            

            model = await cocoSsd.load();

            //console.log(navigator.platform)

            // Set up canvas w and h
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;

            Swal.close();

            predictModel();

            const capBtn = document.getElementById("capBtn");

            capBtn.addEventListener("click", async()=>{

                let imgURL = canvas.toDataURL("image/png");

                let dlLink = document.createElement('a');
                dlLink.download = "fileName";
                dlLink.href = imgURL;
                dlLink.dataset.downloadurl = ["image/png", dlLink.download, dlLink.href].join(':');

                document.body.appendChild(dlLink);
                dlLink.click();
                document.body.removeChild(dlLink);
                
            })

        }

        video.addEventListener('loadeddata', async (event) => {
            console.log('Yay!');
            loadModel();
        });

        var requestAnimationFrameCross = window.webkitRequestAnimationFrame ||
                window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame || window.msRequestAnimationFrame;

        console.log(requestAnimationFrameCross)

        async function predictModel(){
            
            stats.begin();
            
            // img , maxNumBoxes, minScore
            const result = await model.detect(video, 10, 0.45);
                
            ctx.drawImage(video, 0, 0);
            ctx.font = '40px Arial';
            ctx.lineWidth = 5;
            ctx.strokeStyle = "blue";
            ctx.fillStyle = "blue";

            for (let i = 0; i < result.length; i++) {
                ctx.beginPath();
                //three dots mean spread over object get all its properties
                ctx.rect(...result[i].bbox);     
                ctx.stroke();
                ctx.fillText(
                    result[i].score.toFixed(3) + ' ' + result[i].class,
                    result[i].bbox[0],
                    result[i].bbox[1] - 5
                );
            }

            stats.end();
            requestAnimationFrameCross(predictModel);        
        }
    </script>
    


</html>