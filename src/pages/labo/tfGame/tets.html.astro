<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <script is:inline src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous">
    </script>

    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.min.js"></script>

</head>

<body>

    <div id="canvas"></div>

    <div class="d-flex">
        <button type="button" class="btn btn-primary" id="stopCreate">Start create</button>
        <button type="button" class="btn btn-primary" id="stopRotate">Start rotate</button>
        <h4> Rotate speed: </h4>
        <div style="width: 40%; margin-left: 30px;">
            <input type="range" class="form-range" id="rotateSpeedSlider" min="1" max="100" step="5" value="10">
        </div>


    </div>

    <script is:inline>

        let columns; /* To be determined by window width*/
        let rows; /* To be determined by window height */
        let currentBoard;
        let nextBoard;

        const [boxSize, unitLength] = [40, 40];

        let canCreate = false; // create mode or drag mode
        let canRotate = false; // can rotate or not
        let defaultRotateSpeed = 0.0001;

        const stopCreate = document.getElementById("stopCreate"); // create mode or drag mode btn
        const stopRotate = document.getElementById("stopRotate"); // can rotate or not btn
        const rotateSpeedSlider = document.getElementById("rotateSpeedSlider") // rotate speed change slider

        stopCreate.addEventListener("click", () => {
            canCreate = !canCreate;
            stopCreate.innerHTML = canCreate ? "Stop create" : "Start create";
        })

        stopRotate.addEventListener("click", () => {
            canRotate = !canRotate;
            frameCount = 0
            stopRotate.innerHTML = canRotate ? "Stop rotate" : "Start rotate";
        })

        rotateSpeedSlider.addEventListener("input", () => {
            defaultRotateSpeed = parseInt(rotateSpeedSlider.value) / 100000
        })

        let camera;

        function setup() {
            const canvas = createCanvas(windowWidth, windowHeight * 0.9, WEBGL);
            canvas.parent(document.querySelector('#canvas'));

            camera = createCamera();
            //camera.lookAt(2000, 0, 0);
            camera.setPosition(sin(frameCount / 60) * 200, 0, 1000);

            columns = floor(width / unitLength);
            rows = floor(height / unitLength);

            currentBoard = [];
            nextBoard = [];

            for (let i = 0; i < columns; i++) {
                currentBoard[i] = [];
                nextBoard[i] = [];
            }

            frameRate(20);
            init();

        }

        function drawBoxDir(x, y, z) {
            push();
            translate(x, y, z);
            rotateY(-10);
            box(boxSize, boxSize, boxSize);
            //rotateY(30);
            //sphere(boxSize);
            pop();
        }

        function draw() {

            background(250);

            let locX = mouseX - height / 2;
            let locY = mouseY - width / 2;

            pointLight(255, 255, 255, locX, locY, 250);

            !canCreate && orbitControl();

            translate((windowWidth * 0.45) * -1, (windowHeight * 0.43) * -1, 0);
            normalMaterial();

            generate();

            for (let i = 0; i < columns; i++) {

                for (let j = 0; j < rows; j++) {

                    if (currentBoard[i][j] == 1 && nextBoard[i][j] == 1) {
                        fill(60);
                    }
                    else if (currentBoard[i][j] == 1) {
                        normalMaterial();
                    }
                    else {
                        fill(255);
                    }

                    drawBoxDir(i * unitLength, j * unitLength, 0);

                    if (canRotate) {

                        rotateZ(frameCount * defaultRotateSpeed);
                        

                    }

                }
            }

        }

        function mouseDragged() {

            if (mouseX > unitLength * columns || mouseY > unitLength * rows || !canCreate) {
                return;
            }

            const x = Math.floor(mouseX / unitLength);
            const y = Math.floor(mouseY / unitLength);
            currentBoard[x][y] = 1;

            normalMaterial();
            drawBoxDir(x * unitLength, y * unitLength, 0)

        }


        function mousePressed() {

            if (canCreate) {
                noLoop();
                mouseDragged();
            }

        }

        function mouseReleased() {
            loop();
        }

        function generate() {

            for (let x = 0; x < columns; x++) {
                for (let y = 0; y < rows; y++) {

                    let neighbors = 0;
                    for (let i of [-1, 0, 1]) {
                        for (let j of [-1, 0, 1]) {

                            if (i === 0 && j === 0) {
                                // the cell itself is not its own neighbor
                                continue;
                            }

                            neighbors += currentBoard[(x + i + columns) % columns][(y + j + rows) % rows];
                        }
                    }

                    if (currentBoard[x][y] == 1 && neighbors < 2) {
                        nextBoard[x][y] = 0;
                    } else if (currentBoard[x][y] == 1 && neighbors > 3) {
                        nextBoard[x][y] = 0;
                    } else if (currentBoard[x][y] == 0 && neighbors == 3) {
                        nextBoard[x][y] = 1;
                    } else {
                        nextBoard[x][y] = currentBoard[x][y];
                    }

                }
            }

            [currentBoard, nextBoard] = [nextBoard, currentBoard];
        }

        function init() {
            for (let i = 0; i < columns; i++) {
                for (let j = 0; j < rows; j++) {
                    currentBoard[i][j] = 0;
                    nextBoard[i][j] = 0;
                }
            }
        }



    </script>

</body>

</html>