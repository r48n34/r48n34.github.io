<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

</head>

<body>
    <div id='canvas'></div>
    <button id="openBtn"> Open windows </button>
    <button id="closeBtn"> Close All </button>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"
        is:inline
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.2.0/p5.js" is:inline></script>

    <script is:inline>
        const unitLength = 110;
        const boxColor = 150;
        const strokeColor = 50;
        let columns; /* To be determined by window width */
        let rows;    /* To be determined by window height */
        let currentBoard;
        let nextBoard;
        let windowArr = [];

        const openBtn = document.getElementById("openBtn");
        const closeBtn = document.getElementById("closeBtn");

        openBtn.addEventListener("click", () => {
            setWHwindows();
        })

        closeBtn.addEventListener("click", () => {
            closeAllwindows();
        })

        function setup() {
            /* Set the canvas to be under the element #canvas*/
            const canvas = createCanvas(windowWidth, windowHeight - 100);
            canvas.parent(document.querySelector('#canvas'));

            /*Calculate the number of columns and rows */
            columns = floor(width / unitLength);
            rows = floor(height / unitLength);

            /*Making both currentBoard and nextBoard 2-dimensional matrix that has (columns * rows) boxes. */
            currentBoard = [];
            nextBoard = [];
            for (let i = 0; i < columns; i++) {
                currentBoard[i] = [];
                nextBoard[i] = []
                windowArr[i] = []
            }

            init();  
            setInterval(() => console.log(frameRate()), 1000);
        }

        function init() {
            for (let i = 0; i < columns; i++) {
                for (let j = 0; j < rows; j++) {
                    currentBoard[i][j] = 0;
                    nextBoard[i][j] = 0;
                }
            }
        }

        function setWHwindows(){
            let totalwidth = screen.width;
            let totalHeight = screen.height;

            let singleBoxWidth = totalwidth / columns;
            let singleBoxHeight = totalHeight / rows;

            const handle = window.open("", "", `width=1px, height=1px`);
            if (!handle) {
                alert("Close your popup blockers first.");
                return;
            }
            handle.close();

            for (let i = 0; i < columns; i++) {
                for (let j = 0; j < rows; j++) {
                    windowArr[i][j] = window.open("", "", `width=${singleBoxWidth}, height=${singleBoxHeight}`)
                    windowArr[i][j].moveBy(i * singleBoxWidth, j * singleBoxHeight);
                }
            }

            window.focus();
        }

        function closeAllwindows(){
            for (let i = 0; i < columns; i++) {
                for (let j = 0; j < rows; j++) {
                    windowArr[i][j].close();
                }
            }
        }

        function drawWindows(x, y){
            // init may not exist windows, hence try catch here
            try{ 
                currentBoard[x][y] == 1 
                ? windowArr[x][y].document.body.style.backgroundColor = "black"
                : windowArr[x][y].document.body.style.backgroundColor = "white"
            }
            catch(e){

            }
        }

        function draw() {
            background(255);
            generate();
            for (let i = 0; i < columns; i++) {
                for (let j = 0; j < rows; j++) {
                    if (currentBoard[i][j] == 1) {
                        fill(boxColor);
                    } else {
                        fill(255);
                    }
                    stroke(strokeColor);
                    rect(i * unitLength, j * unitLength, unitLength, unitLength);

                    drawWindows(i, j)
                }
            }
        }

        function generate() {
            //Loop over every single box on the board
            for (let x = 0; x < columns; x++) {
                for (let y = 0; y < rows; y++) {
                    // Count all living members in the Moore neighborhood(8 boxes surrounding)
                    let neighbors = 0;
                    for (let i of [-1, 0, 1]) {
                        for (let j of [-1, 0, 1]) {
                            if (i == 0 && j == 0) {
                                // the cell itself is not its own neighbor
                                continue;
                            }
                            // The modulo operator is crucial for wrapping on the edge
                            neighbors += currentBoard[(x + i + columns) % columns][(y + j + rows) % rows];
                        }
                    }

                    // Rules of Life
                    if (currentBoard[x][y] == 1 && neighbors < 2) {
                        // Die of Loneliness
                        nextBoard[x][y] = 0;
                    } else if (currentBoard[x][y] == 1 && neighbors > 3) {
                        // Die of Overpopulation
                        nextBoard[x][y] = 0;
                    } else if (currentBoard[x][y] == 0 && neighbors == 3) {
                        // New life due to Reproduction
                        nextBoard[x][y] = 1;
                    } else {
                        // Stasis
                        nextBoard[x][y] = currentBoard[x][y];
                    }
                }
            }

            // Swap the nextBoard to be the current Board
            [currentBoard, nextBoard] = [nextBoard, currentBoard];
        }

        function mouseDragged() {

            if (mouseX > unitLength * columns || mouseY > unitLength * rows) {
                return;
            }

            const x = Math.floor(mouseX / unitLength);
            const y = Math.floor(mouseY / unitLength);
            currentBoard[x][y] = 1;

            drawWindows(x, y);

            fill(boxColor);
            stroke(strokeColor);
            rect(x * unitLength, y * unitLength, unitLength, unitLength);
        }
        
        function mousePressed() {
            noLoop();
            mouseDragged();
        }

        function mouseReleased() {
            loop();
        }

    </script>
</body>

</html>